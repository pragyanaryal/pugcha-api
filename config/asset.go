package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _asset_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func asset_go() ([]byte, error) {
	return bindata_read(
		_asset_go,
		"asset.go",
	)
}

var _dev_config_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x59\x53\xea\x4c\x10\x7d\xe7\x57\xf0\xe5\x15\xc9\x3e\x59\xac\xb2\xea\x43\x50\x44\xa3\x50\x78\xf1\xe2\x13\x35\x4c\x3a\x8b\x59\x66\x98\x49\x88\xf1\x96\xff\xfd\x56\x16\x94\x5b\xe5\xe3\xf4\x39\xa7\x4f\x9f\x4e\xe7\xcf\x60\x38\x94\x7c\x5c\xe0\x3d\x16\x20\x5d\x0e\x9b\x77\x53\xd9\xe7\x38\x6b\xde\x12\xa3\xa2\x08\x39\x08\xe9\xe2\x84\x94\x02\xf8\xcf\x08\xc3\x42\x54\x94\xfb\x0d\xea\x32\x22\xd4\xb8\x34\x83\x5b\x7a\x75\xc6\xa0\xbc\x68\x50\x64\x1a\xfa\x77\x35\xa2\xa2\xad\xb2\x32\x24\x11\x1e\x67\x65\xb6\xc7\xb1\x4c\xe2\x88\x24\x82\xa7\xa9\x95\xd4\x32\x66\x63\x41\xcb\x22\x1a\x6b\x32\xf7\x85\x8c\x33\xfc\x41\x73\x5c\x09\x99\xd0\x4c\x1a\x0c\x87\x9f\x17\x83\x26\x89\x00\x7e\x04\xbe\xea\x5d\x2e\x0d\x55\x55\x5b\x1b\x29\xa5\xa1\x07\x47\x48\x9b\xf2\xec\xe6\x7a\x33\x97\x3a\x41\x98\xe1\x38\xdd\x7d\x45\x6a\x07\x90\xf7\x98\x24\x90\xfb\xff\xb7\x60\xeb\x70\xf1\xcd\x3d\x0f\xb9\x6a\xf9\x9a\xa6\xfd\xd7\xb7\xc3\x84\x80\x10\xbb\x04\xea\x06\x7e\xa0\xbf\x5e\x5f\xf5\xd9\x6c\xe9\xbd\x45\xca\xe2\x38\x61\x9b\x3b\x93\xac\x47\x55\x81\xb8\xe7\x93\xf9\x11\x6e\xae\x79\xf5\x4c\x6d\x34\xbd\x0f\x47\xc8\x76\x79\xa0\x57\x51\x18\x29\x8f\xc6\x93\xb5\x2a\xc3\x43\x3d\x9a\x5a\x64\xa2\x7a\x34\xd2\xa9\xb3\x5e\x20\xc2\x2a\xc7\x9d\x5c\x75\xfb\x94\x38\x04\x1c\x44\x74\x32\xdb\x6e\xed\x95\x32\xda\xe2\xd5\xd3\x16\xdd\x27\xe9\xcd\xf3\x9b\xe6\xc5\xd1\xfb\x66\x81\x0b\xfb\xf5\xa0\x78\x48\x9d\x7e\x8c\x5e\x96\x1e\x81\x6a\xf3\xcc\xe6\x4f\x73\x7a\xa8\x7f\x57\x49\xb5\xdf\x4c\xd7\xdb\xc9\xe3\x6d\x3d\x9d\xdc\x8e\x6a\x4f\x8b\xd6\xab\xc7\xa5\x6e\xbc\x95\x61\xb9\x5d\x86\xad\x59\x1b\x9e\xd2\x30\x85\x1d\x49\x63\xc8\x8b\x5d\xdc\xc6\x77\x54\xd5\x41\xc8\x31\x1c\xcd\xd2\xc7\xe2\xa0\x65\x16\xc4\x60\x94\x06\x08\xcd\x04\xcb\x65\xea\xc1\x8c\x89\x9b\xea\x44\x94\x28\x93\x31\x63\x42\xee\xda\x34\xfb\x26\x34\x2f\x20\x2f\xce\xd6\xdb\x39\x08\x20\x1c\xda\xcf\xf7\xb2\xbc\x37\xef\x16\x4b\xbe\xde\xe6\x85\x40\x0b\x7d\xf6\x40\xc6\xef\x2f\xfe\x75\x3f\x51\x80\x09\xec\x29\x4d\xce\x14\x88\x60\xd3\x77\x5d\xd3\x30\xb1\x61\xbb\xc4\x26\xc4\xc5\x8e\x0d\xc8\xb5\x54\x3d\xd0\x70\xd0\x19\x7d\x09\x31\x63\x5d\x10\x5b\x43\x96\x65\xe9\x8e\xab\xea\xae\xea\xaa\xbd\x41\x3f\xa1\x68\x18\x51\x51\xb0\x4b\x45\xf1\xe1\x28\x63\x16\xcb\xfd\xa1\x10\x9a\xb5\x37\xa6\x9c\xa8\x4a\xe7\x70\x7a\xee\x1a\xd9\x97\x5e\xfc\xd8\xe0\x1f\x6d\x3b\x1e\x6f\x0b\xfe\xae\xe4\xe9\x99\x75\xaf\xc8\xa1\x48\xe3\xa0\xf9\x21\x98\x72\x04\x1e\x07\xf5\x18\x9a\xbb\x54\xa4\xc1\xe7\xdf\x00\x00\x00\xff\xff\x41\xeb\x18\x0a\xcd\x03\x00\x00")

func dev_config_json() ([]byte, error) {
	return bindata_read(
		_dev_config_json,
		"dev_config.json",
	)
}

var _prod_config_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc9\x72\xe2\x3a\x14\xdd\xf3\x15\x3c\x6f\x09\xb6\x3c\xc8\x43\xaa\x52\xf5\x78\x10\xf2\x48\xcc\x50\x24\xa4\xc9\x8a\x12\xb2\x3c\xe0\x41\x8a\x24\xe3\x76\xba\xf2\xef\x5d\x1e\x48\x58\x74\xf5\xf2\xde\x73\xce\x3d\xf7\x5c\xcb\xbf\x06\xc3\xa1\x12\x20\x89\x8e\x48\x10\xe5\x76\xd8\xd4\x4d\xe7\x58\xa0\xbc\xa9\x15\x46\x85\x8c\x38\x11\xca\xcd\x05\x29\x05\xe1\x7f\x46\x18\x12\xa2\xa2\x3c\x68\x50\x8f\x61\x01\x92\xd2\x0a\xe7\xf4\xee\x8a\x41\xb9\x6c\x50\x68\x99\xc6\x77\x37\xa6\xa2\xed\xb2\x32\xc2\x31\x1a\xe7\x65\x7e\x44\x89\x8a\x93\x18\xa7\x82\x67\x99\x9d\xd6\x2a\x62\x63\x41\x4b\x19\x8f\x75\x95\x07\x42\x45\x39\xfa\xa0\x05\xaa\x84\x8a\x69\xae\x0c\x86\xc3\xcf\x9b\x41\x93\x44\x10\x7e\x26\x7c\xd3\xbb\xdc\xba\xa0\x35\x51\x32\x1a\xf9\xe4\x4c\xb2\xa6\xb9\x58\xcd\xd7\x4a\xc7\x8e\x72\x94\x64\x87\xaf\x3c\xad\xbb\x7a\x44\x38\x25\x45\xf0\x6f\x0b\xb6\xe3\x6f\xbe\xb9\xd7\x09\x37\x2d\x5f\xd7\xf5\x7f\xfa\x71\x08\x63\x22\xc4\x21\x25\x75\x03\x3f\xd1\x97\xb7\x37\x63\x36\x5b\xfb\xa7\x58\x5b\x9c\x27\x6c\xf7\xbf\x85\xb7\xa3\x4a\x42\xee\x07\xf8\xe1\x4c\xee\xff\xe3\xd5\x33\x75\xe0\xf4\x31\x1a\x41\xc7\xe3\xa1\x51\xc5\x51\xac\x2d\xcd\x95\xbd\x29\xa3\xf7\x7a\x34\xb5\xf1\x04\xf8\x34\x36\xa8\xbb\x5d\x40\xcc\x2a\xd7\x9b\xdc\x75\xc7\x54\x38\x09\x39\x11\xf1\xc5\x6c\xbf\x77\x36\xda\x68\x8f\x36\xab\x3d\x7c\x4c\xb3\xfb\xe7\x93\xee\x27\xf1\xcf\xdd\x02\x49\xe7\xed\x5d\xf3\x21\x98\x7e\x8c\x5e\xd7\x3e\x26\xd5\xee\x99\x3d\xac\x1e\xe8\x7b\xfd\xa3\x4a\xab\xe3\x6e\xba\xdd\x4f\x96\xf3\x7a\x3a\x99\x8f\x6a\x5f\x8f\xb7\x9b\xe5\xda\x30\x4f\x65\x54\xee\xd7\x51\x6b\xd6\x86\xa7\x34\xca\xc8\x01\x67\x09\x29\xe4\x21\x69\xe3\xbb\x00\xb8\x10\xba\xa6\xab\xdb\xc6\x18\x86\x41\x2a\x13\x3d\xc4\x26\x44\xd8\x3a\x99\x67\x23\xe7\x58\xf7\x98\x59\x9c\x00\x89\x3c\xa0\x22\xc6\x84\xda\x8d\x69\xee\x8d\x69\x21\x49\x21\xaf\xce\xdb\x39\x08\x82\x39\x69\xbf\x9d\x9c\x2e\x37\x4f\x4b\x66\xc1\xd9\x61\x26\x8d\x57\xfe\x32\x05\x0e\x00\xa7\xaa\xdf\x28\x44\x98\x1c\x29\x4d\xaf\x14\x10\x23\x2b\xf0\x3c\xcb\xb4\x90\xe9\x78\xd8\xc1\xd8\x43\xae\x43\xa0\x67\x03\x23\xd4\x51\xd8\x19\x7d\x09\x11\x63\x5d\x10\x47\x87\xb6\x6d\x1b\xae\x07\x0c\x0f\x78\xa0\x37\xe8\x37\x14\x0d\x23\x96\x92\xdd\x6a\x1a\x62\x89\xda\x3f\x12\x4c\x73\xed\xc2\xd0\xba\xc1\x97\xf2\xd0\xb0\xbf\x64\xe2\xef\xba\x76\x23\xde\x36\x82\x43\xc9\xb3\x2b\xb7\x5e\x51\x10\x99\x25\x61\xf3\x03\x30\xed\x4c\x78\x12\xd6\x63\xd2\x3c\x45\x4d\x19\x7c\xfe\x0e\x00\x00\xff\xff\x7a\x24\x9b\xe4\xbd\x03\x00\x00")

func prod_config_json() ([]byte, error) {
	return bindata_read(
		_prod_config_json,
		"prod_config.json",
	)
}

var _test_config_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xdb\x6e\xda\x40\x10\x7d\xe7\x2b\xa8\x5f\x49\xec\xf5\x65\x7d\x41\x8a\x54\x42\x6e\x24\x0e\x46\xa4\xa4\xce\x13\x5a\xd6\xe3\x4b\x30\x5e\xb3\x6b\xe3\xb8\x55\xfe\xbd\xf2\x05\x4a\xa5\xf4\x71\xe6\x9c\x33\xe7\xcc\xec\xfe\x1e\x0c\x87\x52\x40\x0a\xb2\x21\x02\xa4\xf1\xb0\xa9\x9b\xce\x26\x23\xbb\xa6\x96\x72\x26\x8a\x88\x83\x90\x2e\x8e\x48\x29\x80\x7f\x8d\xe4\x44\x88\x8a\xf1\xe0\x3f\x28\xe3\x45\x83\x60\x43\xd7\xfe\x76\x63\x26\xda\xae\xaa\x59\x32\x92\x91\xac\x4a\x83\xe1\xf0\xf3\x62\xd0\xe4\x12\xc0\x0f\xc0\x17\xbd\x6e\x6c\x23\x84\x5a\xa1\x94\xb2\xc8\x85\x03\xa4\x4d\x7b\x36\xbf\xf3\xa4\x8e\x1f\xed\x48\x92\xae\x4f\xf9\xca\x88\xc6\x44\xde\x10\xba\x85\x2c\xf8\xde\x82\x32\x65\xbb\x6e\x44\xc7\x3d\x4f\xbc\x68\xf9\xaa\xaa\x7e\xeb\xc7\x11\x4a\x41\x88\xf5\x16\xea\x06\x7e\x62\x3f\xde\xde\xb4\x9b\x1b\xcf\x7d\x8f\x95\xd9\x61\x92\xaf\x1e\x0c\xba\x1c\x55\x05\xe6\x6e\x40\xef\x0f\x70\x7b\xcd\xab\x17\x66\xe1\xe9\x63\x34\xc2\x96\xc3\x43\xad\x8a\xa3\x58\x79\xd6\xe7\xe6\xa2\x8c\xf6\xf5\x68\x6a\xd2\x09\x72\x59\xac\x31\x7b\x39\xc3\x34\xaf\x6c\x67\x72\x75\xd5\xc5\xe1\x10\x72\x10\xf1\xd1\xcc\xf7\xad\x85\x32\xf2\xc9\x62\xee\xe3\xc7\x6d\x7a\xfb\xf2\xae\xba\x49\xfc\xb1\x9a\x91\xc2\x7a\xdb\x2b\x2e\x46\xd3\x5f\xa3\x57\xcf\xa5\x50\xad\x5e\xf2\xfb\xf9\x3d\xdb\xd7\x3f\xab\x6d\xb5\x59\x4d\x97\xfe\xe4\xf9\xae\x9e\x4e\xee\x46\xb5\xab\xc6\xcb\xc5\xb3\xa7\xe9\xef\x65\x54\xfa\x5e\xd4\x9a\xb5\xcb\x33\x16\xa5\xb0\xa6\x69\x02\x59\xb1\x4e\xda\xf5\x6d\x84\x6c\x8c\x6d\xdd\x56\x4d\xed\x52\xec\xd5\x9d\x09\x09\xe8\xa5\x0e\x42\x35\xc0\x74\x72\xb4\x37\x12\xea\xa4\x1a\x15\x25\xde\xc9\x24\xcf\x85\xdc\x8d\x69\xee\x4d\x59\x56\x40\x56\x9c\x9d\xb7\x73\x10\x40\x39\xb4\xaf\xf7\xea\x3d\x1a\x0f\x33\x8f\x2f\xfd\xac\x10\x78\xa6\xdd\x3c\xd1\xcb\x8f\xd7\xe0\xba\x4f\x14\x12\x0a\x1b\xc6\xb6\x67\x0a\x4c\x89\x11\x38\x8e\xa1\x1b\x44\xb7\x1c\x6a\x51\xea\x10\xdb\x02\xec\x98\x48\x0b\x55\x12\x76\x46\x27\x21\xc9\xf3\x6e\x11\x4b\xc5\xa6\x69\x6a\xb6\x83\x34\x07\x39\xa8\x37\xe8\x13\x8a\x86\x11\x17\x45\x3e\x56\x94\x00\x0e\x32\xc9\x13\xb9\xff\x28\x94\xed\xc6\x3a\x42\x48\x39\x52\x95\xce\xe1\x58\xae\x1b\xd9\x49\x2f\xbe\x1c\xf0\x8f\xb6\x8d\xc7\xdb\x46\xb0\x2e\x79\x7a\x66\xdd\x2b\x32\x28\xd2\x24\xac\x9b\x6b\x2a\x07\xe0\x49\x58\x5f\x42\xf3\x2f\x15\x69\xf0\xf9\x27\x00\x00\xff\xff\x64\xed\xd7\x9d\x9a\x03\x00\x00")

func test_config_json() ([]byte, error) {
	return bindata_read(
		_test_config_json,
		"test_config.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"asset.go": asset_go,
	"dev_config.json": dev_config_json,
	"prod_config.json": prod_config_json,
	"test_config.json": test_config_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"asset.go": &_bintree_t{asset_go, map[string]*_bintree_t{
	}},
	"dev_config.json": &_bintree_t{dev_config_json, map[string]*_bintree_t{
	}},
	"prod_config.json": &_bintree_t{prod_config_json, map[string]*_bintree_t{
	}},
	"test_config.json": &_bintree_t{test_config_json, map[string]*_bintree_t{
	}},
}}
