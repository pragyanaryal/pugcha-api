// Code generated by jsonenums -type=Weekday; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_WeekdayNameToValue = map[string]Weekday{
		"Sunday":    Sunday,
		"Monday":    Monday,
		"Tuesday":   Tuesday,
		"Wednesday": Wednesday,
		"Thursday":  Thursday,
		"Friday":    Friday,
		"Saturday":  Saturday,
	}

	_WeekdayValueToName = map[Weekday]string{
		Sunday:    "Sunday",
		Monday:    "Monday",
		Tuesday:   "Tuesday",
		Wednesday: "Wednesday",
		Thursday:  "Thursday",
		Friday:    "Friday",
		Saturday:  "Saturday",
	}
)

func init() {
	var v Weekday
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_WeekdayNameToValue = map[string]Weekday{
			interface{}(Sunday).(fmt.Stringer).String():    Sunday,
			interface{}(Monday).(fmt.Stringer).String():    Monday,
			interface{}(Tuesday).(fmt.Stringer).String():   Tuesday,
			interface{}(Wednesday).(fmt.Stringer).String(): Wednesday,
			interface{}(Thursday).(fmt.Stringer).String():  Thursday,
			interface{}(Friday).(fmt.Stringer).String():    Friday,
			interface{}(Saturday).(fmt.Stringer).String():  Saturday,
		}
	}
}

// MarshalJSON is generated so Weekday satisfies json.Marshaler.
func (r Weekday) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _WeekdayValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Weekday: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Weekday satisfies json.Unmarshaler.
//func (r *Weekday) UnmarshalJSON(data []byte) error {
//	var s string
//	if err := json.Unmarshal(data, &s); err != nil {
//		return fmt.Errorf("Weekday should be a string, got %s", data)
//	}
//	v, ok := _WeekdayNameToValue[s]
//	if !ok {
//		return fmt.Errorf("invalid Weekday %q", s)
//	}
//	*r = v
//	return nil
//}
